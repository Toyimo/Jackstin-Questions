Question List in October, 2022
==============================

| Simple and reliable.
| 简单可依赖。

.. _1工作记录:

1、工作记录
-----------

.. _w1-1031-to-1104:

W1. 1031 to 1104
~~~~~~~~~~~~~~~~

高速和城市的街边，车端要求路口面为 0 的问题，效果不回退。

1. | 1031 测试不同阈值 [-0.5,0.5] & [-1, 1] 的拍平效果，检出问题；
   | 1031 从云端更新代码后周边要素异常问题解决；
   | 1031 高程断裂问题初步定位到相邻 0 平面 juntions 间 link 插值非
     0，尚待验证；

2. | 1101 统计占比，[-0.5,0.5] 以及 [-1.0, 1.0] 的拍平占比；
   | 1101 实现相邻 0 平面 juntions 间 link 插值函数，调试时发现
     process_urban_height() 函数处理前生成的
     TEMP_JUNCTION_LINK_CONNECT_TMP 表中异常 junction 链接的
     single_connect_link_geom 缺失，考虑将这些缺失的链接关系补充进来；

3. | 1102 补充缺失的路口以及 LINK
     链接关系，测试拍平效果符合预期想法，该类问题初步解决；
   | 1102
     统计所有路口高程数据，构成路口高程分布直方图，分析讨论提高拍平路口占比的方案；
   | 1102 尝试压平 [-1, 2.5] 范围内的路口面，引发很多异常道路连接情况；

4. | 1103 拉取并合并本地代码，测试现光修复高程问题后的路口压平效果；
   | 1103 对向路一侧压平，而另一侧没被压平的问题，初步排查与
     TEMP_JUNCTION_LINK\_ CONNECT_TMP 表有关，表中没有相关记录；

5. | 1104 下载原始未高程对齐数据，编译 preprocess 程序；
   | 1104 修改权重因子，测试 1e2、1e4
     参数的高程分布效果，正在寻找合适的参数；

.. _w2-1107-to-1111:

W2. 1107 to 1111
~~~~~~~~~~~~~~~~

1. | 1107 配合上周三内存泄露修复，修改 preprocess
     中隐藏的内存泄露问题解决处理机中断问题；
   | 1107 在范围 [8e5, 1e6] 内测试 1e6、1e7
     偏移效果，无明显偏移，目前选择保留原始权重参数，对高程进行整体偏移
     2m 的处理，可以将拍平占比提高到
     89%，且视觉上看无明显异常；路口高程分布以及处理前后城市坡度统计值如图；

2. | 1108 进一步完善不同权重参数作用下的路口高程统计数据，如文档所示：；
   | 1108 分析道路面前后高程不一致原因，初步形成解决方案；

3. | 1109 调整生成参数，生成高程对齐不同权重参数下的坡度统计信息；
   | 1109
     进一步分析汇入路段高程异常问题，初步完成多前驱后继汇集处高程处理代码框架；

4. | 1110 继续编写汇入路段高程处理代码；
   | 1110 测试山区 8e5，1e6
     参数作用下的高程对齐效果，检查盘山路是否提升为高架；

5. | 1110 统计不同参数下的坡度值；
   | 1110 完成汇入路段高程处理代码并进行测试；

城市高速和非高速合流的高程处理，路口拍平的事情。事情要更明确一些。

.. _w3-1114-to-1118:

W3. 1114 to 1118
~~~~~~~~~~~~~~~~

1. | 1114 城市/高速结合处高程通过 RoadClass
     标识定位，解决一些零碎的代码错误；
   | 1114 后继情况下需要调整的 LINK
     经过调整函数处理后的高程数据曲线符合预期；
   | 1114 前驱情况下的调整函数有点问题，尚待调整；

2. | 1115 修复前驱情况下的调整函数；
   | 1115 调试输出 66 个城市/高速结合点，在 viewer
     中逐个检查高程拉齐情况；根据检查情况，可以将问题分为三类：1
     是距离判断方法在始终点存在微小偏差，尝试修改距离判断为百分比判断；2
     是发现重复处理路段存在高程陡降问题，尝试进一步完善复杂情况的处理；
   | 1115 编写高差分析代码，预计通过生成数据绘制 DEM
     处理前后的高差图以及相关统计项，程序尚在运行；

3. | 1116
     高速-城市前驱后继高程处理完成，依据百分比判别的条件进一步调整，复杂路况有所优化；
   | 1116 前驱后继道路面不一致问题：(1) 生产 LINK 断裂问题 ➝
     已反馈生产；(2) 路口与道路连接问题 ➝ 待处理；(3) 城市/高速接边问题
     ➝ 已解决；

4. | 1117
     修正高程调整基准选择的优先级为：高速>城市快速路>普通道路，对应扩充待处理
     cha 长度小于基准路线时的程序处理；
   | 1117
     初步查看前驱后继道路面在路口处的高程异常问题，尝试分析代码原因，尚未明确；

5. | 1118 补足算法中尚未覆盖的情况，测试无误并提交代码；
   | 1118 继续分析前驱后继道路面在路口处的高程异常问题；

.. _w4-1121-to-1125:

W4. 1121 to 1125
~~~~~~~~~~~~~~~~

1. | 1121
     【城市/高速链接处高程处理】整理并重新组织代码，测试北京全域数据；
   |  (1) 解决周末全域测试时发现的 SQLite 临时文件磁盘空间不足问题；
   |  (2) 编译北京市全域数据核验有无代码问题，尚未编译完成；
   | 1121
     【前驱后继道路面高程断裂处理】基本明确问题症结在于断头路场景处理；
   |  (1) 尝试提高断头路场景处理阈值以覆盖未被处理的 LINK
     道路并进行测试；
   |  (2) 在进一步的分析中，定位并解决断头路场景 LINK 长度计算问题；

2. | 1122 【引导面破损系列问题】实现断头路 LINK 每 20m
     拉齐代码，主要查看2003894, 6593117 LINK 的高程处理效果；消除断头路
     LINK 中高程异常凸起，但引入了高程缝隙；
   | 1122 【城市/高速链接处高程处理】北京全域数据编译成功，无中断问题；
   | 1122
     【前驱后继道路面高程断裂处理】协同上面城市/高速链接处高程处理重新编译，等待编译
     PB 数据查看全域结果；

3. | 1123
     【引导面破损系列问题】解决高程缝隙问题并分析坡度信息，进一步完成代码处理；
   | 1123
     整理提交【城市/高速链接处高程处理】、【前驱后继道路面高程断裂处理】代码；

4. | 1124
     【前驱后继道路面高程断裂处理】北京市全域发现城市、高速接边处形成的断头路使用目前的处理方法会形成断裂面，需要继续深入挖一下断裂高程是在哪里引入的；
   | 1124 【城市 LINK 平滑】将断头路 LINK 平滑处理提升到所有 LINK
     处理，完成代码；
   | 1124
     【城市/高速链接处高程处理】发现路面有横坡的时候现有处理算法仍形成一个较小的高程缝隙，正在@宇婷一起想办法；

5. | 1125【城市 LINK 平滑】明确代码位置，检查 4 tile
     的平滑效果，目前尚未发现明显问题；在 116.348155, 40.021852
     有断裂现象；
   | 1125【前驱后继道路面高程断裂处理】分析高程数据，发现 CHA 没问题但
     LBR
     出现断裂，正在核实问题引入代码；另一方面，梳理了高程后续处理代码，打算添加一步对齐处理以消除引入的高程问题；
   | 1125【城市/高速链接处高程处理】继续改进；

.. _w5-1128-to-1201:

W5. 1128 to 1201
~~~~~~~~~~~~~~~~

1. | 【前驱后继道路面高程断裂处理】延续扩展阈值的思路对断头路进行高程处理，尝试区分进行城市/高速形式断头路以避免错误的断头路高程处理；路口间高程处理定位到相关函数，尝试根据阈值进行测试，目前暂未看到明显效果；
   | 【城市 LINK 平滑】进一步完善并提交代码；

2. 修正路口间高程调整时部分 LINK
   未被覆盖的情况；配合高程代码调整修正断头路的 LINK 平滑处理代码；

3. 配合排查修复城市高速链接处 LINK 断裂问题；调整断头路的 LINK
   处理代码；

4. | 改进 LINK 均匀化拉直处理代码：LINK 长度对阈值 50 取余，剩余部分小于
     50/2 时重新调整距离阈值= link.length/(商 + 1)；
   | 识别高程变化较大的路口（阈值>0.8），并对数据进行分析；
   | 完成断头路 LINK 拉直代码的调整，正在验证效果；

5. | 筛选高程变化较大的 LINK 进行分析，起伏较大 LINK
     正向插值和反向插值效果不一；
   | 设计同时统计正向插值高差超限和反向插值超限情况，任意一个超限就报出。

| 高速数据波浪问题：116.407336, 39.681562
| 道格拉斯抽析
| 门限值统一进行平均，小尺度平均噪声；
| 合入代码，查看并核对北京全域的输出结果；

.. _2日常积累:

2、日常积累
-----------

.. _21-vim-命令:

2.1 VIM 命令
~~~~~~~~~~~~

#vim

正常模型下的常用命令：

.. code:: bash

   # 正常模式下
   0  # 移动到行首
   $  # 移动到行尾
   gg # 移动到文件头部
   G  # 移动到文件尾部
   ctrl+f # 下翻一屏。
   ctrl+b # 上翻一屏。

查找相关：

.. code:: bash

   /something   # 后查 something
   /?something  # 前查找 something
   n            # 向后查找下一个
   N            # 向前查找下一个
   /nohl        # 退出查找的高亮

复制粘贴删除：

.. code:: bash

   yy              # 复制当前行
   nyy             # 复制当前开始的 n 行
   p               # 粘贴
   dd              # 删除一行
   ndd             # 删除当前开始的 n 行
   :20,30 copy 10  # 将 [20,30] 行的数据拷贝到第 10 行
   :20,30 move 10  # 将 [20,30] 行的数据移动到第 10 行

撤销：

.. code:: bash

   u      # 撤销上一步的操作
   Ctrl+r # 恢复上一步被撤销的操作

.. _22-linux-命令:

2.2 LINUX 命令
~~~~~~~~~~~~~~

#linux

.. code:: bash

   # 查看内存占用
   free -h               # 查看内存占用
   top                   # 查看系统的实时负载
   ps -ef | grep <name>  # 查看名为 name 的线程

.. _23-git-命令:

2.3 GIT 命令
~~~~~~~~~~~~

#git

.. code:: bash

   git log                                       # 查看提交记录
   git reset --hard <commit-id>                  # 回退到 <commit-id> 分支
   git reset --soft <commit-id>                  # 回退 <commit-id> 版本且不修改文件
   git stash                                     # 隐藏尚未 commit 的提交
   git checkout -b <本地分支名> origin/<远程分支名>  # 创建本地分支并关联到远程分支
   git fetch origin <远程分支名>:<本地分支名>        # 拉取远程分支到本地分支
   # 先把自己本地代码存起来，然后再 pull，再 stash pop 将代码恢复
   git stash 
   git pull 
   git stash pop
   git stash list                                # 列举本地所有的 stash 信息

.. _24-调试记录:

2.4 调试记录
~~~~~~~~~~~~

SQLite 操作时发生 Error: database or disk is full
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

當你在使用 sqlite 操作 DB 時如果發生錯誤：

   Error: database or disk is full

有兩種可能：

1. 你放 DB 的磁區真的太滿了，那就清出來就好。(看操作，可能會需要數倍 DB
   的空間)

2. SQLite 使用的 temp 空間不夠大，這個狀況的解法是進入 sqlite 的
   interactive mode

   並且執行（cppsqlite3 中可以用 ``db.execDML()`` 函数执行）：

      ``PRAGMA temp_store_directory = 'directory-name';``

   还原为默认目录只需要将其设置为：\ ``PRAGMA temp_store_directory = '';``

   //
   测试目录：\ ``PRAGMA temp_store_directory='/home/work/tongjx/tmp';``

需要注意：

   | **谨慎使用 temp_store_directory 修改临时文件存储目录！！！**
   | 对于 Unix/Linux/OSX 来说，默认可路径是 /var/tmp, /usr/tmp, /tmp
     以及当前目录 current-directory 中第一个可写的目录。对于 WINDOWS
     NT，默认路径由 WINDOWS 决定，通常是C:\\Documents and
     Settings\\user-name\\Local Settings\\Temp\\。
   | SQLite创建的临时文件在打开后会被立即删除（unlink）,
     这样当SQLite进程退出时，操作系统就可以自动删除这些文件。所以正常状态下，使用ls或dir命令是无法看到这些临时文件的。

经过排查，定位到代码输出错误的地方是 BD_BAC 表在与其他两个表
BD_LBR、BD_LAN 和 BD_CHA 关联时使用了三次 LEFT JOIN IN
语句，这个语句对一个 20GB 的数据库而言会产生庞大的 TMP
临时文件缓存，所以需要自定义 PRAGMA 临时文件存放目录。

   .. figure:: pic/202211/sql-joins.png
      :align: center
      :alt: SQL JOINS 语句类型

   LEFT JOIN
   是相当耗资源的操作，关联字段没有索引时速度很慢；故而若使用该语句时，最好用索引字段取关联，或者给关联的字段加索引。

目前的解决方案是重新指定缓存文件目录并在整个程序运行结束后销毁这个目录；更好的策略应该是修复算法，将三重
LEFT JOIN 查询给优化调。

C++ 浮点型相等判断
^^^^^^^^^^^^^^^^^^

.. code:: c++

   static inline bool double_equal(double a, double b){
       return fbs(a - b) < std::numeric_limits<double>::epsilon();
   }

参考文献
~~~~~~~~

1.  Visual Data Tools. MAC 论文数据图表工具
    `DataGraph <https://www.visualdatatools.com/DataGraph/Trial/>`__\ [EB/OL].

2.  Visual Data Tools. MAC 三维数据图表工具
    `ImageTank <https://www.visualdatatools.com/ImageTank/>`__\ [EB/OL].

3.  Visual Data Tools. `LatinMordern Latex
    论文字体 <http://www.visualdatatools.com/DataGraph/Support/LatinModern.zip>`__\ [EB/OL].

4.  MacTEX. `MAC 完整 Tex
    论文运行环境 <https://tug.org/mactex/mactex-download.html>`__\ [EB/OL].

5.  SciDAVis.MAC 论文数据图表工具
    `SciDAVis <https://scidavis.sourceforge.net/>`__\ [EB/OL].

6.  CSDN 博客.
    `VIM命令大全 <https://blog.csdn.net/admiral58/article/details/122419682>`__\ [EB/OL].

7.  知乎.
    `git如何退回到之前的代码 <https://zhuanlan.zhihu.com/p/32498998>`__\ [EB/OL].

8.  Jack Yu. `Sqlite 操作時發生 Error: database or disk is
    full <https://jackyu.medium.com/sqlite-%E6%93%8D%E4%BD%9C%E6%99%82%E7%99%BC%E7%94%9F-error-database-or-disk-is-full-d76ec3e39820>`__\ [EB/OL].

9.  内存网. `我对SQLite的强行研究 <http://ddrv.cn/a/257636>`__\ [EB/OL].

10. gepulog. `SQLite3をPythonから使っていたら、sqlite3.OperationalError
    database or disk is
    fullというエラーが出た <https://blog.gepuro.net/posts/when_using_sqlite_3_from_python_i_get_an_error_sqlite3operationalerror/>`__\ [EB/OL].

11. sqlite.org.
    `pragma_temp_store_directory <https://www.sqlite.org/pragma.html#pragma_temp_store_directory>`__\ [EB/OL].

.. _3知识积累:

3、知识积累
-----------

.. _31-高斯函数:

3.1 高斯函数
~~~~~~~~~~~~

#高斯

对于形如 :math:`y=e^{-x^2}` 形式的高斯函数其具有如下的函数曲线：

   .. figure:: pic/202211/f.e-x2.png
      :align: center
      :alt: 高斯函数曲线

其在形式和图形表现上都近似于正态分布；高斯函数通常用来表示期望值为
:math:`\mu` 且方差为 :math:`\sigma^2` 的正态分布 :math:`N(\mu,\sigma^2)`
的概率密度函数，即：

.. math:: f(x)=\frac{1}{\sqrt{2\pi}\sigma}e^{-\frac{(x-\mu)^2}{2\sigma^2}},x\in(-\infty,+\infty)

对高斯函数积分可以得到高斯积分，其定积分的计算结果如下：

.. math:: \int_{-\infty}^{+\infty}e^{-x^2}dx=\sqrt{\pi}

而在高程对齐中，我们引入的权重计算公式如下：

.. math:: w_i=\frac{e^{-s_i^2\cdot \alpha}}{\sum_i e^{-s_i^2\cdot \alpha}}

式中，\ :math:`\alpha=10^5`
为参数权重因子，从结果上来看应该是可以决定权重的分布距离。\ :math:`\alpha`
越小，远处高程参与计算的影响程度越高，高程越平滑，对齐后结果可能越低；\ :math:`\alpha`
越大，远处高程参与计算的影响程度越低，高程可能就越大一些。

.. _32-热力图:

3.2 热力图
~~~~~~~~~~

| **密度分析算法**\ ：点密度分析、线密度分析和核密度分析算法；
| **数据的可视化**\ ：构建 ``{x, y ,value}``
  数组，通过绘制点缓冲半径以及颜色叠加方法实现热力图；

注意：云图和热力图是很像的两种图，它们的区别在于，云图的数据源要求图的每一个区域都有数值，而热力图是在图上的某些离散点有数值；事实上，云图可以看作是高密度的热力图。

密度分析
^^^^^^^^

摘自《ArcMap 密度分析工具集》：

   密度分析可以对某个现象的已知量进行处理，然后将这些量分散到整个地表上，依据是在每个位置测量到的量和这些测量量所在位置的空间关系。通过简单计算和核计算均可实现密度计算。这两种工具的输出与核密度工具的输出的区别在于，对于点密度和线密度，需要指定一个邻域以便计算出各输出像元周围像元的密度。

   **点密度与线密度分析**

   在简单密度计算中，将求出落在搜索区域内的点或线的总和，然后除以搜索区域的面积从而得到各像元的密度值。

   **核密度分析**

   而核密度则可将各点的已知总体数量从点位置开始向四周分散。在核密度中，在各点周围生成表面所依据的二次公式可为表面中心（点位置）赋予最高值，并在搜索半径距离范围内减少到零。对于各输出像元，将计算各分散表面的累计交汇点总数。

点密度与线密度比较好理解，即统计邻域内要素的个数然后除以邻域面积作为该单元格的值；而核密度估计其实是对直方图的一个自然拓展，主要是对核函数的一种空间应用。将\ **原始空间**\ 中的向量作为\ **输入向量**\ ，并返回\ **特征空间**\ （转换后的数据空间,可能是高维）\ **中向量的点积**\ 的函数称\ **为核函数**\ 。

.. _33-二次曲线:

3.3 二次曲线
~~~~~~~~~~~~

二次曲线英文全称为 Quadratives
Curves，其可由含有两个变量的二次方程所定义。二次曲线能够表示点、线、圆、椭圆、抛物线或双曲线，其常规数学形式如下：

.. math:: a_{00}x_0^2+2a_{01}x_0x_1+a_{11}x_1^2+b_0x_0+b_1x_1+c=0

若令 :math:`\mathbf{A}=[a_{ij}]` 为对称 2 :math:`\times` 2
矩阵，\ :math:`\mathbf{b}=[b_i]` 和 :math:`\mathbf{x}=[x_i]` 为 2
:math:`\times` 1
向量，则可将上式转换为矩阵形式（参考自《计算机图形学的几何工具》128
页）：

.. math:: \mathbf{x}^T\mathbf{A}\mathbf{x}+\mathbf{B}^T\mathbf{x}+c=0

.. _参考文献-2:

参考文献
~~~~~~~~

1. 知乎.
   `ArcGIS密度估计/热力图分析 <https://zhuanlan.zhihu.com/p/504305107>`__\ [EB/OL].

2. 知乎.
   `什么是核密度估计？如何感性认识？ <https://www.zhihu.com/question/27301358>`__\ [EB/OL].

3. 博客园.
   `热力图生成算法及其具体实现 <https://www.cnblogs.com/charlee44/p/16294700.html>`__\ [EB/OL].

4. ArcMap.
   `点密度分析、线密度分析与核密度分析之间的区别 <https://desktop.arcgis.com/zh-cn/arcmap/10.3/tools/spatial-analyst-toolbox/differences-between-point-line-and-kernel-density.htm>`__\ [EB/OL].

5. ArcMap.
   `核密度分析的工作原理 <https://desktop.arcgis.com/zh-cn/arcmap/10.3/tools/spatial-analyst-toolbox/how-kernel-density-works.htm>`__\ [EB/OL].

6. Silverman, B. W. `Density Estimation for Statistics and Data
   Analysis <https://ned.ipac.caltech.edu/level5/March02/Silverman/paper.pdf>`__.New
   York: Chapman and Hall, 1986.

7. CSDN 博客.\ `对核函数 Kernel
   最通俗易懂的理解 <https://blog.csdn.net/mengjizhiyou/article/details/103437423>`__\ [EB/OL].

8. 知乎. `Sqazine
   《多边形网格处理》翻译 <https://www.zhihu.com/people/sqazine/posts>`__\ [EB/OL].
