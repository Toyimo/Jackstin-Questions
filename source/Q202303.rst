Question List in March, 2023
==============================

.. _1工作记录:

1、工作记录
-----------

.. _w1-0306-to-0310:

W1. 0306 to 0310
~~~~~~~~~~~~~~~~

1. | (1) 分析坡度异常点 LOG，剔除位于路口内的坡度异常点；
   | (2) 修复二次提升时长度错误引起的 LINK 坡度变化的问题；
   | (3) 路口附近高程处理：断头路补充前驱后继循环的情况；

2. | 平滑后二次高程修正：偏移量传递到前驱后继 LINK 的高程中，开发进度
     80%；
   | (1) 完成指定距离内前驱后继关系梳理；
   | (2) 完成前驱后继高程偏移量传递以及压盖关系维护；

3. | (1) 平滑后二次高程修正：完成高程二次修正时偏移量向其他 LINK
     的传递；
   | (2) 分析苏州剩余高程压盖问题：剩下的问题比较分散，考虑单独裁剪 demo
     后再做处理；
   |  a. 剩余点位中 [0, 2] 区间 69 个，[2, 3] 区间 109 个，裁剪 [0,1]
     区间 demo 数据；
   |  b. 裁剪 demo
     数据中，发现计算压盖点时，环线的线线交点计算异常问题，正在修复；

4. | (1) 修复因压盖点计算错误引起的高程二次修正错误问题；
   | (2) 尝试调整 zlevel 层高数值 6->7 并检查压盖问题个数；
   | (3) 裁剪剩余范围异常点位作为 demo 数据，继续分析压盖点异常问题；

5. | (1)
     高程二次提升：修正目标高程计算规则，覆盖高差为负值时的高程提升；
   | (2) 高程二次提升：添加异常点分组 >= 2 时的 LINK 抬升函数；

.. _w2-0313-to-0317:

W2. 0313 to 0317
~~~~~~~~~~~~~~~~

1. | (1) 高程二次提升：增加 LINK 异常点时上时下的场景判别，仅处理 LINK
     位于上层时的抬升；
   | (2) 路口周边高程：调整两侧 LBR
     分别平滑为单侧平滑，根据平滑后的结果对另一侧的高程进行对齐，进度
     40%；

2. | (1) 排查部分城市高程处理死循环问题：前驱后继计算错误引起，已修复；
   | (2) 新增坡度变化 >10° 指标的统计：包括 LINK 内和相邻 LINK
     间衔接处的坡度变化；
   | (3)
     路口周边高程：平滑后依据评价指标指定参考线，并对另一侧进行高程对齐，进度
     80%；修复断头路/路口间 LINK 分类错误问题；

3. | (1) 路口周边高程优化：完成路口周边生成的 LBR
     在高程平滑后对齐代码的开发；
   | (2) 排查修复苏州全域数据中断问题：修复路口周边高程处理时 LBR
     为空时的串线错误问题，修正串接路口间道路时路口的定义规则；
   | (3) 排查异常坡度点问题：特殊的复杂盘桥；

4. | (1) 排查异常坡度点问题：特殊的复杂盘桥，是其中一条 LINK 的原始
     zlevel 错误引起的；
   | (2) 高程平滑算法优化，优化 LINK 间平滑处理：
   |  a. 选取前中后 3 条 LINK 串成一条 LINK
     后统一平滑，平滑后对齐，开发进度 50%；
   |  b. 苏州 301 个坡度异常点（15-30°：280 个，30°-：21 个）；

5. | LINK 间高程平滑优化：
   | (1) 完成合并后平滑并进行高程对齐的代码；
   | (2) 前中后合并后平滑每条 LINK 会处理 3 次，导致平滑过度效果回退；

.. _w3-0320-to-0324:

W3. 0320 to 0324
~~~~~~~~~~~~~~~~

1. | (1) 修复高程偏移量传递时由于距离计算错误引起的坡度异常问题；
   | (2) 添加 LINK 前驱后继搜索限制，仅对后继进行 LINK 间平滑处理；
   | (3) 针对合并 LINK 平滑移除道格拉斯抽稀过程，采用凸角检测+ B
     样条进行平滑；

2. | (1) 坡度异常回退问题排查：串线 LINK
     逆向时高程分配错误问题引起，已修复；
   | (2)
     路口周边高程问题排查：凸角检测平滑在近路口处配合不太理想，考虑近邻路口
     20m 邻域线性拉齐，而后以 0.2 道格拉斯抽稀后进行高程平滑；
   |  a. 完成单 LBR 近邻拉齐后进行平滑的代码；
   |  b. 进行多段 LBR 链接时的近邻路口 20m 线性拉齐代码开发，进度 80%；
   | (3) 合并 LINK 平滑增加 0.2 道格拉斯抽稀，避免平滑插点过密：117s >
     73s (demo 运行时间)；

3. | (1) 完成多段 LBR 链接时的近邻路口 20m 线性拉齐代码；
   | (2) 初步设计上下行高程对齐方案；

4. | (1) 完善上下行高程对齐方案；
   | (2) 完成上下行 LINK
     串接及合并，计算上下行互相投影后中间重叠区域进度 50%，整体进度
     20%；

5. | 上下行高程对齐：整体进度 40%；
   | (1) 上下行互相投影后，中间重叠区域计算以及高程对齐完成；
   | (2) 计算关键点并依据关键点进行对齐后高程分配，开发进度 60%；

.. _w4-0327-to-0331:

W4. 0327 to 0331
~~~~~~~~~~~~~~~~

1. | 上下行高程对齐，整体进度 60%；
   | (1) 完成依据关键点截断合并后几何的代码，完成截断后对原始 LINK
     高程的分配；
   | (2)
     完成重叠区域依据关键点进行对齐后的高程分配，非重叠区域按高程偏移进行偏移；

2. | 上下行高程对齐，整体进度 70%；
   | (1) 计算路口节点，进行上下行路口节点的高程偏移量传递，进度 50%；
   | (2) 熟悉 SD 数据发布和定投流程；

3. | 上下行高程处理：
   | (1) 完成上下行路口节点计算，并进行上下行路口节点的高程偏移量传递；
   | (2) 初步提交上下行高程处理代码：压盖回退
     30->1657，目前分析两方面原因，1 是部分路段对齐失败，2
     是对齐参考基准选择问题，待核实；
   | 调查修复北京西直门压盖错误：部分道路未参与压盖计算引起，已修复；
   | 核对 0324 高程走查问题：上下行 8 处，道路面畸形 13
     处，其他大部分问题已修复；

4. | 上下行高程异常问题排查：
   | (1) 修复合并上下行 link
     时，前驱后继出现错位导致的合并几何计算异常问题；
   | (2)
     修复高程对齐后重新分配时，首尾投影点未插入到原始几何中引起的计算异常问题；
   | (3)
     修复高程分配时逆序截断几何的高程分配问题，修复部分程序中断问题；

5. 继续修复上下行高程异常问题：调查异常 topo
   报错问题，无明显几何异常，测试区域问题基本修复；

月度备忘录
~~~~~~~~~~

待办事项
^^^^^^^^

-  ☒ **相邻 LINK
   间的曲线平滑**\ ：目前是凸角检测平滑，进行曲线优化，凸角阈值测试场景未检出；是否在凸角检测后补充二次贝塞尔曲线插值待考察；合并后平滑，而后高程对齐；

-  ☐ **上下行高程一致性：**
   维护上下行道路的高程一致性，让上下行高程对齐；

-  ☒ **平滑后二次高程修正**\ ：目前仅为单 LINK
   的修正，偏移量未传递到前驱后继 LINK
   的高程当中，若偏移点距离始终点过近则可能会令坡度异常值增多；

-  ☒ **路口附近高程处理优化**\ ：统计左 LBR 坡度异常点时发现 1615
   个坡度异常，所以路口间的高程仍需进行进一步的优化；主要是路口附近高程坡度变化过大问题，上海
   demo 数据中发现很多路口附近高程异常： 121.354666, 31.185555；

-  ☒ **高程统计项**\ ：补充坡度变化（>10°）点数统计，LINK 内和 LINK 间；

提交记录
^^^^^^^^

.. code:: bash

   git commit -m "[mapauto6-23748] STATISTIC: remove the issue piont within junction; SMOOTH: fix tail distance misalignment problem."
   git commit -m "[mapauto6-23748] SMOOTH: transfer height offset to next links."
   git commit -m "[mapauto6-23748] SMOOTH: fix sh2xyz error for height enhancement."
   git commit -m "[mapauto6-23748] SMOOTH: fix some second pick up issue."
   git commit -m "[mapauto6-23748] SMOOTH: fix second pick up crash; STATISTIC: add delta slope statistics."
   git commit -m "[mapauto6-23748] STATISTIC: fix delta slope statistics issue."
   git commit -m "[mapauto6-23748] CROSS: add align line height to line for lbrs."
   git commit -m "[mapauto6-23748] SMOOTH: modify smooth function between links."
   git commit -m "[mapauto6-23748] SMOOTH: fix direction error of 2-links smooth."
   git commit -m "[mapauto6-23748] CROSS: make nearby height align for cross lbr."
   git commit -m "[mapauto6-23748] UPDOWN: upload up-down elevation align function."
   git commit -m "[mapauto6-23748] UPDOWN: turn down the up-down button."

.. _2日常积累:

2、日常积累
-----------

.. _21-linux-清除缓存:

2.1 LINUX 清除缓存
~~~~~~~~~~~~~~~~~~

#linux

(1) 清除缓存：

.. code:: bash

   echo 1 > /proc/sys/vm/drop_caches
   echo 2 > /proc/sys/vm/drop_caches
   echo 3 > /proc/sys/vm/drop_caches
    
   # 它们所表示的含义为：
   # echo 1 表示清除pagecache。 
   # echo 2 表示清除回收slab分配器中的对象（包括目录项缓存和inode缓存）。
   #        slab分配器是内核中管理内存的一种机制，其中很多缓存数据实现都是用的pagecache。 
   # echo 3 表示清除pagecache和slab分配器中的缓存对象。

(2)清除磁盘空间：

.. code:: bash

   # 列出磁盘空间现状
   df -h
   # 列出目录下的各文件夹的大小
   du -ah --max-depth=1/

(3)命令行计算器：

.. code:: bash

   bc

(4) VSCode 设置终端显示行数

.. code:: bash

   Setttings: Terminal > Integrated:Scrollback 设置显示行数

.. _22-线段树:

2.2 线段树
~~~~~~~~~~

#线段树

线段树又称区间树，是一种基于分治思想的二叉树结构，每个节点代表一段区间，和按照利用二进制性质划分区间的树状数组相比，线段树是一种更加通用的数据结构。线段树的每个节点代表一个区间，叶子节点代表输入序列中的单个元素，非叶子节点代表输入序列中的一些元素的区间。

线段树的主要应用是解决区间查询问题，例如区间最小值、区间最大值、区间和等问题。线段树可以在
:math:`O(\log n)`
的时间内应答这些查询。在下面的示例代码中，我们定义了一个 SegmentTreeNode
结构体，表示线段树的节点。在 ``build`` 函数中，我们递归地构建线段树。在
``query`` 函数中，我们递归地查询区间和。

.. code:: c++

   #include <iostream>
   #include <vector>

   using namespace std;

   // 线段树节点
   struct SegmentTreeNode {
       int start, end;
       int sum;
       SegmentTreeNode *left, *right;

       SegmentTreeNode(int start, int end) {
           this->start = start;
           this->end = end;
           this->sum = 0;
           this->left = nullptr;
           this->right = nullptr;
       }
   };

   // 构建线段树
   SegmentTreeNode* build(vector<int>& nums, int start, int end) {
       if (start > end) {
           return nullptr;
       }

       SegmentTreeNode* root = new SegmentTreeNode(start, end);

       if (start == end) {
           root->sum = nums[start];
       } else {
           int mid = start + (end - start) / 2;
           root->left = build(nums, start, mid);
           root->right = build(nums, mid + 1, end);
           root->sum = root->left->sum + root->right->sum;
       }

       return root;
   }

   // 区间查询
   int query(SegmentTreeNode* root, int start, int end) {
       if (root == nullptr) {
           return 0;
       }

       if (root->start == start && root->end == end) {
           return root->sum;
       }

       int mid = root->start + (root->end - root->start) / 2;
       if (end <= mid) {
           return query(root->left, start, end);
       } else if (start > mid) {
           return query(root->right, start, end);
       } else {
           return query(root->left, start, mid) + query(root->right, mid + 1, end);
       }
   }

   int main() {
       vector<int> nums = {1, 3, 5, 7, 9, 11};
       SegmentTreeNode* root = build(nums, 0, nums.size() - 1);

       cout << query(root, 0, 2) << endl; // 输出9
       cout << query(root, 2, 5) << endl; // 输出32

       return 0;
   }

.. _23-c-基础:

2.3 C++ 基础
~~~~~~~~~~~~

#cplusplus

C++11 引入了 ``tuple``
元组容器，它是一个固定大小的不同类型值的集合，是一种快速而低质（\ *quick
and dirty*\ ）的容器，可以用于函数返回多个返回值。通过
``std::get<i>(tuple)`` 可以访问 ``tuple`` 中的第 ``i``
个元素，也可以使用 ``std::tuple_size<decltype(tuple)>::value`` 来获取
``tuple`` 的大小。以下是一个 ``tuple`` 的例子：

.. code:: c++

   #include <iostream>
   #include <tuple>
   #include <string>

   int main() {
       std::tuple<int, std::string, double> myTuple(1, "hello", 3.14);
       std::cout << std::get<0>(myTuple) << std::endl; // 1
       std::cout << std::get<1>(myTuple) << std::endl; // hello
       std::cout << std::get<2>(myTuple) << std::endl; // 3.14
       std::cout << std::tuple_size<decltype(myTuple)>::value << std::endl; // 3
       return 0;
   }

.. _24-vscode:

2.4 VSCode
~~~~~~~~~~

#vscode-误删

误删文件恢复
^^^^^^^^^^^^

1. 在vscode界面，按住Ctrl+shift+p打开命令面板，找到本地历史记录；

2. 点击本地历史记录，会将刚才删除的文件给列出来，点击文件即可查看对该文件的操作记录，选中想要的记录，会打开该文件代码，复制出来即可。

参考文献
~~~~~~~~

1. CSDN 博客.
   `清理linux系统内存缓存 <https://blog.csdn.net/summer_fish/article/details/127843793>`__\ [EB/OL].

2. CSDN 博客.
   `图解R树的原理及相关操作 <https://blog.csdn.net/jinking01/article/details/115719744>`__\ [EB/OL].

3. 知乎.
   `走近std::tuple，揭秘C++元组的底层实原理 <https://zhuanlan.zhihu.com/p/356954012>`__\ [EB/OL].

4. 博客园.
   `12种数据量纲化处理方式 <https://www.cnblogs.com/spssau/p/13820281.html>`__\ [EB/OL].

5. AcWing.
   `处理区间的数据结构总结 <https://www.acwing.com/blog/content/3367/>`__\ [EB/OL].

6. GIS 开发者.
   `空间拓扑关系详解 <https://www.giserdqy.com/gis/gisknowledge/35267/?amp=1>`__\ [EB/OL].

7. 简书.
   `判断点在线段上的投影点是否在线段内 <https://www.jianshu.com/p/702c63f9ea21>`__\ [EB/OL].

8. CSDN 博客.
   `VSCode恢复被误删的文件（巧用本地历史记录） <https://blog.csdn.net/qq_21473443/article/details/128581181>`__\ [EB/OL].
