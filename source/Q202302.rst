Question List in Febrary, 2023
==============================

.. _1工作记录:

1、工作记录
-----------

.. _w1-0206-to-0210:

W1. 0206 to 0210
~~~~~~~~~~~~~~~~

1. | (1) 高程处理中增加循环压盖场景的识别：利用更改其他 link zlevel
     的函数输出在距离处理阈值内可能存在循环压盖的场景，测试范围内 596
     条压盖中仅发现 3 条，排查后均非循环压盖；北京全域压盖发现 35/37855
     条，目前分析大多与测试范围内的情况相同；
   | (2) 排查下穿辅路 zlevel 提升错误问题：误将当前 link
     参与到缓冲区计算，现已修复；针对辅路情况将 zlevel
     提升时的处理阈值从 100 调整为 50；

2. | (1) 调试递归处理缓冲区 link
     时的异常崩溃问题，递归函数缺少默认返回值；
   | (2) 初步制定高程统计项：
   |  a.【压盖关系正确性衡量指标】统计\ **跨压点**\ 的高差，>3m
     为正确的高程；
   | 
     b.【上下行及主辅路的高程一致性指标】统计\ **上下行主辅路**\ 高程起伏一致性：确定上下行路段及关联
     link，转换为 s-h 后统计上下行路段的高差、斜率变化；
   |  c.【道路高程平滑性指标】以 10°
     为组距统计坡度（0°-90°）的频率分布直方图；每 300m 统计连续 link
     的坡度变化情况；统计 >15° 的 link 长度的占比；

3. | (1) 整理【压盖关系正确性衡量指标】代码，剔除重复计算的压盖点；
   | (2)
     完成【道路高程平滑性指标】中坡度分布直方图的统计代码，剔除近邻坡度异常点；
   |  (3) 压盖关系正确性衡量指标发现部分平滑过度的问题，正在修复；

4. | (1) 排查压盖关系统计异常项，修复部分场景由于 link
     内前向后向搜索异常或重复引起的上下行压盖提升不一致的问题，修复部分
     link 平滑过度问题；
   | (2)
     整理上下行高程起伏一致性统计思路，进行上下行高程一致性统计项的开发；

5. | (1) 进行上下行高程一致性统计项的开发，开发进度
     50%，完成根据已有数据重组上下行 link 工作，目前正在比对 sd 上下行
     link 的高程；
   | (2) 整理统计项输出内容，完善输出文件格式；

.. _w2-0213-to-0217:

W2. 0213 to 0217
~~~~~~~~~~~~~~~~

1. | (1) 上下行高程一致性统计项完成按非 0 段分组以及匹配（分组首点间距
     500 以及分组间距差 300 设定匹配，需进一步优化）的开发，整体开发进度
     70%；
   | (2) 修改坡度表达方式由坡比改为坡度，修正直方图统计最大区间阈值；

2. | (1) 苏州复杂盘桥的压盖：定位问题为 11 条 link 短距离内交出 34
     个压盖点，考虑针对压盖提升后存在 zlevel
     分布不均匀的压盖进行二次处理；
   | (2)
     定位了现有路口处理的代码，讨论了一下路口情况，后面统计时补充针对路口的坡度计算；

3. | (1) 优化递归处理，规避路口处多前驱后继的 zlevel 提升问题；
   | (2)
     优化凸角检测平滑算法，从调整到重心修改为避免平滑前后出现过大高差；

4. | (1) 复杂盘桥场景优化：初步实现二次 zlevel 对齐处理，令每条 link
     在局部窗口内保持相同的 zlevel
     特性；将原本耦合在一起的路口处各条道路进行了拆离，初步具备高程分层效果；
   | (2)全国 SD 高程统计项：摸底全国 SD 数据情况，编写批处理工具生成 CSV
     汇总表；

5. | 【复杂盘桥场景优化】
   | (1) 二次处理优化：引入道路种别 kind
     字段对非高速/城市快速路做降维处理；
   |  (2) 初次 zlevel 处理：忽略 kind=6/7/8
     城市次干路、城市支路、其它道路的城市支路计算，规避 zlevel
     提升的增量式求解；
   |  (3) 将初次 zlevel 处理时被动提升 zlevel link
     也参与到二次处理优化流程中进行求解；
   |  (4) 考虑将 kind=6/7/8 的城市支路统一压平，调低 convex
     处理阈值避免过度处理；

.. _w3-0220-to-0224:

W3. 0220 to 0224
~~~~~~~~~~~~~~~~

1. | (1)
     统计项添加非高速区域压盖占比统计，测试范围内城市快速路与其他的占比大致为
     1:1；
   | (2) 引入 from 道路形态字段，拍平 37/38
     左转右转专用道，在统计项中对应剔除相应情况（保留其与其他城市主路之间的压盖检测）；
   | (3) 初步制定平滑后高差过近 link
     的高程修正方案：在平滑处理后，对发现的压盖过小的点进行上层整体提升，上层提升时传递高程调整信息，调整阈值范围内包含上层
     link 时对应提升；

2. | (1) 调查并修复路口附近高程平滑代码失效问题；
   | (2) 开始编写平滑后高差过近 link 的高程修正代码，开发进度 50%；
   | (3)
     初步调查苏州全域的异常高程点：路口配合，上下行异常，平滑过度，道路标识异常；

3. | (1) 继续编写平滑后高差过近 link 的高程修正代码，进度 60%；
   | (2) 高程凸角检测平滑后新增 bspline 曲线插值提高平滑性，link
     间曲线配合不理想；
   | (3) 优化 bspline 曲线插值参数，800m link 的 27 个点插值后 300
     个点下调为 150 个点；

4. | (1) 初步完成平滑后高程过近 link
     的高程提升，高程变化时迭代处理相关压盖 link 的高程；
   | (2) 调查苏州 75 个 P0 高程问题并进行分类；

5. | 【平滑处理优化】
   | (1) 对 link 间的高程平滑处理进行优化：调高处理阈值覆盖更多场景；
   | (2) 补充 link 抽稀后点数过少情况的处理：2 个点补充线性插值，3
     个点补充二阶 bezier 插值；
   | (3) 修复抽稀后不同 LINK
     最小点间距不一致引起的平滑不均匀问题：调整高程 bspline
     插值函数，限定插值密度 2-10；
   | (4) 修复 sh 坐标转换为 xyz 坐标时部分内插点没有对齐的问题；

.. _w4-0227-to-0303:

W4. 0227 to 0303
~~~~~~~~~~~~~~~~

1. | (1) 添加点序号与前驱后继关系对齐核验的函数，避免 link
     间高程对齐处理失败；
   | (2) 路口间依旧路口距离进行 link 高程修正代码开发，进度 50%；
   | (3)
     合并代码发现高程平滑后再进行水平平滑，使得部分高程特征点被消去了；

2. | 【路口间高程处理】开发进度 80%，正在调试短距离路口平滑：
   | (1) 完成路口间/断头路两种场景的识别；
   | (2) 完成路口附近左右两侧 lbr 顺序的核验和串接；
   | (3) 完成短距离路口的平滑，正在调试；

3. | (1)
     完成路口附近高程处理：完成长距离路口间、断头路场景的路口附近高程修正；
   | (2) 近邻压盖合并输出 log：定义 60m 范围内为近邻点位；

4. | (1) 处理上下重叠路口问题：邻域路口高程对齐时添加高差限制，>3m
     时保留原始高程；
   | (2)
     更新苏州全域坏点调查：主要是相邻近距离路口的较大高差，上下行高程问题等；另外，路口附近高程截断问题基本修复，考虑忽略坡度的过短间距点以减少误报；
   | (3) 发现部分 link 没有被二次抬升的问题；

5. | (1) 调试并修复部分 link 没有被二次抬升的问题，修正上下 zlevel
     判断的异常；
   |  (2) 修复坡度异常回退问题：新引入的 kind=10 的步道；
   |  (3) 统计项新增左 lbr
     坡度统计，统计路口处理后的用于渲染的线条坡度；
   |  (4) 修复程序 crash 问题，make 编译优化运行结果不一致导致异常；

编译优化与 make 的关系，为什么编译优化一定要有默认返回值；代码 crash
的效果；

月度备忘录
~~~~~~~~~~

待办事项
^^^^^^^^

-  ☒ **执行二次 zlevel 处理**\ ：初步检查 zlevel
   提升后高程问题并不太大，但是赋予高程后开始错乱，检查一下并核实是否是因为缺少
   3 级 zlevel 导致的压盖处异常；

-  ☐ **插值平滑优化：** Catmull-Rom 内插值平滑；

-  ☒ **路口高程优化**\ ：50 米高差过大直接拉平；

-  ☒
   **二次高程修正**\ ：考虑在平滑处理后，对发现的压盖过小的点进行上层整体提升，上层提升时传递高程调整信息，调整阈值范围内包含上层
   link 时对应提升；

-  ☒ **引入 kind
   字段**\ ：引入二次压盖处理后，城市下层道路压盖异常，参考手图用 kind
   拆解盘桥；

-  ☒ **异常压盖点**\ ：大多与 kind=6/7/8
   的道路有关，直接将城市支路拍平，参考手图；

-  ☒ **近邻路口重叠**\ ：特别是上下路口的高程效果；

-  ☐ **相邻 LINK
   间的曲线平滑**\ ：目前是凸角检测平滑，进行曲线优化，凸角阈值测试场景未检出；

工作内容
^^^^^^^^

SD Render 高程处理：提高 SD 高程整体平滑性、优化 SD
复杂压盖关系的计算、优化 SD 路口高程处理、优化 SD
上下行高程处理，持续跟踪修复 SD 高程问题；HD Render
高程处理：持续跟踪修复城市数据高程问题；

1. SD 高程平滑性：实现高程曲线插值算法，提高单 LINK 以及 LINK
   间的整体高程平滑效果；

2. SD 复杂压盖关系：根据 ZLEVEL
   计算邻域压盖、路口压盖、盘桥压盖以及其他复杂场景的压盖关系，为 SD
   平面数据赋予高程信息，并对整体高程平滑性进行维护；

3. SD
   路口高程：针对拍平的路口及路口间三维拓扑关系，维护路口附近高程正确性；

4. SD 上下行高程处理：维护上下行高程一致性；

5. SD 高程问题修复：依据设计方案和实现效果，持续修复 SD 高程数据问题；

提交记录
^^^^^^^^

.. code:: bash

   git commit -m "[mapauto6-23748] ZLEVEL: deal with distance buffer and threshold."
   git commit -m "[mapauto6-23748] daily update."
   git commit -m "[mapauto6-23748] get remaining distance return 0 by default."
   git commit -m "[mapauto6-23748] ZLEVEL: repair pre suc zlevel calculte error; STATISTIC: add height overlap and slope histogram."
   git commit -m "[mapauto6-23748] STATISTIC: add up-down check (not complete)."
   git commit -m "[mapauto6-23748] ZLEVEL: add 2-nd zlevel align process."
   git commit -m "[mapauto6-23748] ZLEVEL: use KIND and FORM field optimize the process of zlevel."
   git commit -m "[mapauto6-23748] SMOOTH: fix cross height smooth invalid issue."
   git commit -m "[mapauto6-23748] SMOOTH: add bspline step for convex smooth; ZLEVEL: add height adjust after smooth (testing)."
   git commit -m "[mapauto6-23748] SMOOTH: use bspline after convex smooth; CROSS: add cross link smooth."
   git commit -m "[mapauto6-23748] STATISTIC: add nearby issue point group size."
   git commit -m "[mapauto6-23748] CROSS: add dh judgement for nearby h align."
   git commit -m "[mapauto6-23748] SMOOTH: debug height adjust after smooth."
   git commit -m "[mapauto6-23748] STATISTIC: add left lbr slope analysis."
   git commit -m "[mapauto6-23748] SMOOTH: fix second pick up crash."

路口高程配合问题；立交连续跨压路段的高程起伏问题，坡度 >15°
的门限值是否要针对 SD 车端进行重新处理；提高高程平滑灵敏度后视觉上整体
link 的平滑性均有所提高，测试范围内的坡度异常占比由 0.3 降到 0.15；仅对
zlevel 进行处理，仅调查 zlevel 处理后的效果，检查提升后 link
平滑性的问题，检查提升后压盖关系有无错位等等；针对偶现的上下行路段高程出现错位的问题，设计实现在上下行出现高差时输出
LOG 的代码；K-S 检验、时间翘曲距离；测试上下行高程一致性非 0
段分组效果；

.. code:: bash

   CUID:E0692B2F770E16656A972450221DB17B|0

.. _2业务知识:

2、业务知识
-----------

二叉搜索统计阈值；

.. _21-日常积累:

2.1 日常积累
~~~~~~~~~~~~

#sql

.. _sql-detach--and-attach:

SQL DETACH and ATTACH 
^^^^^^^^^^^^^^^^^^^^^^

#cplusplus

.. _pushback-和-emplaceback:

push_back 和 emplace_back
^^^^^^^^^^^^^^^^^^^^^^^^^

``emplace_back`` 在效率上比 ``push_back`` 要好一些，

#cplusplus

遍历 list 时同时访问 2 个元素
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

共有 3 种方式：(1) 使用 C++11 中的 pre 和 next；(2) 复制 list 到
vector；(3) 创建新的 iterator。根据日常使用情况，第一种方式更为自然。

.. code:: c++

   #include <list>
   #include <iostream>

   int main(){
       std::list<int> array = {1, 2, 3, 4, 5};
       std::list<int>::iterator it;
       for(it = array.begin(); it != array.end(); it++){
           auto next_it = std::next(it, 1);
           if(next_it == array.end()){
               break;
           }
           std::cout << *it << "," << *next_it << std::endl;
       }
       return 0;
   }

.. _22-坡度:

2.2 坡度
~~~~~~~~

坡度的表示方法有百分比法、度数法、密位法和分数法四种，其中以百分比法和度数法较为常用。百分比表示法计算公式为：坡度
= (高程差/路程)x100%，即坡比
:math:`i`\ ；另外一种为度数表示法，用三角函数表示 :math:`slope`\ ，
二者计算公式如下：

.. math:: i=\frac{h}{l}\times 100\%;\quad slope=\arctan\left(\frac{h}{l}\right)

对应关系如下：

.. math::

   \begin{bmatrix}
   \mathrm{\ Slope:}&0^{\circ}&5^{\circ}	&10^{\circ}&30^{\circ}	&45^{\circ}&60^{\circ}&90^{\circ} \\
   \mathrm{\ Radio: }&0\%	&9\%	&18\%	&58\%	&100\%	&173\%	&\infty 
   \end{bmatrix}

参考文献
~~~~~~~~

1. 段虎明等.
   `道路路面测量数据的特征参数提取与统计分析 <pdf/高程统计/道路路面测量数据的特征参数提取与统计分析.pdf>`__\ [J].
   振动与冲击: 2013(1), 32.

2. 墨天轮. `2022年蓝桥杯省赛 C/C++
   A组题解 <https://www.modb.pro/db/583267>`__\ [EB/OL].

3. 博客园.\ `SQL Server 2014
   对数据库进行分离(detach)和附加(attach)操作 <https://www.cnblogs.com/Andre/p/13995296.html>`__\ [EB/OL].

4. 知乎. `一文帮你弄清楚 push_back 和 emplace_back
   的区别 <https://zhuanlan.zhihu.com/p/496401940>`__\ [EB/OL].

5. 博客园. `柯尔莫可洛夫-斯米洛夫检验（Kolmogorov–Smirnov test，K-S
   test） <https://www.cnblogs.com/jiangkejie/p/11572205.html>`__\ [EB/OL].

6. 知乎.
   `如何判断两条轨迹（或曲线）的相似度？ <https://www.zhihu.com/question/27213170>`__\ [EB/OL].

7. 博客园.
   `如何在循环中访问list前后元素 <https://www.cnblogs.com/learnopencad/p/4300471.html>`__\ [EB/OL].

8. 知乎. `#
   自动驾驶【3种点集生成外边界方式】 <https://zhuanlan.zhihu.com/p/549182863>`__\ [EB/OL].
